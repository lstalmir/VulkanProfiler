name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:
    inputs:
      build_os_windows:
        description: 'Windows'
        type: boolean
        default: true
      build_os_linux:
        description: 'Linux'
        type: boolean
        default: true
      build_config_release:
        description: 'Release'
        type: boolean
        default: true
      build_config_debug:
        description: 'Debug'
        type: boolean
        default: false

jobs:
  configure:
    if: github.event.pull_request.draft == false

    name: Configure
    runs-on: ubuntu-latest

    outputs:
      config: ${{ steps.gen_build_configs.outputs.config }}

    steps:
    - uses: actions/checkout@v4
    - id: gen_build_configs
      run: |
        oses=$(python ${{github.workspace}}/VkLayer_profiler_layer/scripts/gen_build_configs.py \
            "windows=${{ inputs.build_os_windows }}" \
            "linux=${{ inputs.build_os_linux }}")
        build_types=$(python ${{github.workspace}}/VkLayer_profiler_layer/scripts/gen_build_configs.py \
            "Release=${{ inputs.build_config_release }}" \
            "Debug=${{ inputs.build_config_debug }}")
        echo "config={\"matrix\":{\"build_type\":$build_types},\"oses\":$oses}"
        echo "config={\"matrix\":{\"build_type\":$build_types},\"oses\":$oses}" >> $GITHUB_OUTPUT

  build_windows:
    needs: [ configure ]
    if: ${{ contains( fromJson(needs.configure.outputs.config).oses, 'windows' ) }}

    # Build configs.
    strategy:
      matrix: ${{ fromJson(needs.configure.outputs.config).matrix }}

    name: Build Windows ${{matrix.build_type}}
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory.
      run: cmake -B ${{github.workspace}}/build

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{matrix.build_type}}

    - name: Install
      if: matrix.build_type == 'Release'
      # Install build artifacts to a common directory
      run: cmake --install ${{github.workspace}}/build --prefix ${{github.workspace}}/install

    - name: Publish artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: ${{runner.os}}-${{matrix.build_type}}-${{runner.arch}}
        path: ${{github.workspace}}/install
        retention-days: 1

  build_linux:
    needs: [ configure ]
    if: ${{ contains( fromJson(needs.configure.outputs.config).oses, 'linux' ) }}

    # Build configs.
    strategy:
      matrix: ${{ fromJson(needs.configure.outputs.config).matrix }}

    name: Build Linux ${{matrix.build_type}}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Install Dependencies
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: extra-cmake-modules libvulkan-dev libx11-dev libxext-dev libxrandr-dev libx11-xcb-dev libxcb-shape0-dev
        version: 1.0

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{matrix.build_type}}

    - name: Install
      if: matrix.build_type == 'Release'
      # Install build artifacts to a common directory
      run: cmake --install ${{github.workspace}}/build --prefix ${{github.workspace}}/install

    - name: Publish artifacts
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: ${{runner.os}}-${{matrix.build_type}}-${{runner.arch}}
        path: ${{github.workspace}}/install
        retention-days: 1
